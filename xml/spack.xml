<?xml version="1.0"?>
<!DOCTYPE chapter [
  <!ENTITY % entities SYSTEM "generic-entities.ent">
  %entities;
]>

<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?><chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="spack.xml" xml:id="cha-spack" xml:lang="en" version="5.1">
 <title>&spack; package management tool</title>
 <info xmlns:d="http://docbook.org/ns/docbook">
  <abstract>
   <para>
    &spack; is a configurable Python-based package manager, automating
    the installation and fine-tuning of simulations and libraries.
    &spack; can install many variants of the same build
    using different compilers, options, and MPI implementations.
    For more information, see the
    <link xlink:href="https://spack-tutorial.readthedocs.io/en/latest/">&spack; Documentation</link>.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 <revhistory xml:id="rh-cha-spack">
   <revision>
     <date>2024-07-16</date>
     <revdescription>
       <para/>
     </revdescription>
   </revision>
 </revhistory>
</info>

 <sect1 xml:id="spack-installation">
  <title>Installing &spack;</title>
  <para>
   Use this procedure to install &spack; on any node in the cluster.
  </para>
  <procedure xml:id="pro-spack-installation">
   <title>Installing and configuring &spack;</title>
   <step>
    <para>
     Install &spack;:
    </para>
<screen>&prompt.root;zypper in spack</screen>
   </step>
   <step>
    <para>
     Set up your environment with the appropriate script for your shell:
    </para>
    <stepalternatives>
     <step>
      <para>
       For bash/zsh/sh:
      </para>
<screen>&prompt.root;. /usr/share/spack/setup-env.sh</screen>
     </step>
     <step>
      <para>
       For tcsh/csh:
      </para>
<screen>&prompt.root;source /usr/share/spack/setup-env.csh</screen>
     </step>
     <step>
      <para>
       For fish:
      </para>
<screen>&prompt.root;. /usr/share/spack/setup-env.fish</screen>
     </step>
    </stepalternatives>
   </step>
   <step>
    <para>
     It is recommended to install <literal>bash-completion</literal> so you can
     use <keycap>TAB</keycap> key auto-completion for &spack; commands:
    </para>
<screen>&prompt.root;zypper in bash-completion</screen>
<screen>
&prompt.root;spack <emphasis>TAB</emphasis>
activate      clone         dependencies  fetch         list          providers     solve         url
add           commands      dependents    find          load          pydoc         spec          verify
arch          compiler      deprecate     flake9        location      python        stage         versions
blame         compilers     dev-build     gc            log-parse     reindex       test          view
buildcache    concretize    develop       gpg           maintainers   remove        test-env
build-env     config        docs          graph         mark          repo          tutorial
cd            containerize  edit          help          mirror        resource      undevelop
checksum      create        env           info          module        restage       uninstall
ci            deactivate    extensions    install       patch         rm            unit-test
clean         debug         external      license       pkg           setup         unload</screen>
   </step>
  </procedure>
</sect1>

<sect1 xml:id="spack-simple-example">
 <title>Using &spack;: simple example with netcdf-cxx4</title>
 <para>
  This example procedure shows you different ways to build
  <literal>netcdf-cxx4</literal> with &spack;.
 </para>
 <procedure xml:id="pro-spack-simple-example">
  <title>Building <literal>netcdf-cxx4</literal> with &spack;</title>
  <step>
   <para>
    Show detailed information on <literal>netcdf-cxx4</literal>:
   </para>
<screen>&prompt.root;spack info netcdf-cxx4
AutotoolsPackage:   netcdf-cxx4

Description:
    NetCDF (network Common Data Form) is a set of software libraries and
    machine-independent data formats that support the creation, access, and
    sharing of array-oriented scientific data. This is the C++ distribution.

Homepage: https://www.unidata.ucar.edu/software/netcdf

Maintainers: @WardF

Tags:
    None

Preferred version: <co xml:id="spack-info-version"/>
    4.3.1    ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-cxx4-4.3.1.tar.gz

Safe versions:
    4.3.1    ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-cxx4-4.3.1.tar.gz
    4.3.0    ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-cxx4-4.3.0.tar.gz

Variants: <co xml:id="spack-info-variants"/>
    Name [Default]    Allowed values    Description
    ==============    ==============    ===================================================

    doxygen [on]      on, off           Enable doxygen docs
    pic [on]          on, off           Produce position-independent code (for shared libs)
    shared [on]       on, off           Enable shared library
    static [on]       on, off           Enable building static libraries

Installation Phases:
    autoreconf    configure    build    install

Build Dependencies: <co xml:id="spack-info-deps"/>
    autoconf  automake  doxygen  libtool  m4  netcdf-c

Link Dependencies:
    netcdf-c

Run Dependencies:
    None

Virtual Packages:
    None</screen>
   <calloutlist>
    <callout arearefs="spack-info-version">
     <para>
      &spack; uses the latest version by default, unless you specify otherwise
      with <literal>@<replaceable>VERSION</replaceable></literal>.
     </para>
    </callout>
    <callout arearefs="spack-info-variants">
     <para>
      You can disable the variant options using
      <literal>-<replaceable>VARIANT</replaceable></literal> or enable
      them using <literal>+<replaceable>VARIANT</replaceable></literal>.
     </para>
    </callout>
    <callout arearefs="spack-info-deps">
     <para>
      The packages required by <literal>netcdf-cxx4</literal> must already be built.
     </para>
    </callout>
   </calloutlist>
  </step>
  <step>
   <para>
    Build <literal>netcdf-cxx4</literal> with the variants <literal>static</literal>
    and <literal>doxygen</literal> disabled:
   </para>
<screen>&prompt.root;spack install netcdf-cxx4 -static -doxygen
==&gt; netcdf-c: Executing phase: 'autoreconf'
==&gt; netcdf-c: Executing phase: 'configure'
==&gt; netcdf-c: Executing phase: 'build'
==&gt; netcdf-c: Executing phase: 'install'
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/netcdf-c-4.7.4-vry3tfp6kpq364gyxrj6fali4kqhirx7
==&gt; Installing netcdf-cxx4-4.3.1-msiysdrdua3vv6izluhaeos4nyo5gslq
==&gt; No binary for netcdf-cxx4-4.3.1-msiysdrdua3vv6izluhaeos4nyo5gslq found: installing from source
==&gt; Fetching https://spack-llnl-mirror.s3-us-west-2.amazonaws.com/_source-cache/archive/6a/6a1189a181eed043b5859e15d5c080c30d0e107406fbb212c8fb9814e90f3445.tar.gz
#################################################################################################################### 100.0%
==&gt; netcdf-cxx4: Executing phase: 'autoreconf'
==&gt; netcdf-cxx4: Executing phase: 'configure'
==&gt; netcdf-cxx4: Executing phase: 'build'
==&gt; netcdf-cxx4: Executing phase: 'install'
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/netcdf-cxx4-4.3.1-msiysdrdua3vv6izluhaeos4nyo5gslq</screen>
  </step>
  <step>
   <para>
    Rebuild <literal>netcdf-cxx4</literal> with the default variants, and
    specify the version:
   </para>
<screen>&prompt.root;spack install netcdf-cxx4@4.3.1
==&gt; Warning: Missing a source id for python@3.6.13
==&gt; Warning: Missing a source id for pkgconf@1.5.3
[+] /usr (external autoconf-2.69-tatq2aqbhboxbyjt2fsraoapgqwf3y5x)
[+] /usr (external automake-1.15.1-3d7wkh42v52c6n77t4p7l2i7nguryisl)
[+] /usr (external bison-3.0.4-y6ckc7e7mqnnkgmkbgcfbw5vgqzg5b6m)
[+] /usr (external cmake-3.17.0-jr4evnjsgd7uh5stt33woclti37743kg)
[+] /usr (external flex-2.6.4-vea2lhgajmeyjm6ei5d2bqvpss4ipors)
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/libiconv-1.16-itovpc5jssshcgpeejrro6l7jn4ynaq7
[+] /usr (external python-3.6.13-rpf47wa6wfn7h3rnydpxijoczc6opno2)
[+] /usr (external libtool-2.4.6-ddch2qlie7t4ypbqg6kmf3uswqg2uylp)
[+] /usr (external m4-1.4.18-tloh56qj47ahddst5g2xqsawffuz5ew6)
[+] /usr (external pkgconf-1.5.3-gmxadsjg6q3xqwjwws5a4v4b4ugvi6p4)
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/util-macros-1.19.1-rpnlbst6v3oqjm7tfoxasmn7wlilpqut
[+] /usr (external xz-5.2.3-x3glm5yp2ixldbe7n557evglhygvlkqh)
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/zlib-1.2.11-z6y74kgd73yc23kr5252slbydmk4posh
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/doxygen-1.8.20-3griwieblqgb6ykc5avzkzrxmtaw4s2g
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/numactl-2.0.14-tcuvjjtkhnyf5ijrazenjra5h5dbj4in
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/libpciaccess-0.16-y3w7dlktz22lmdj6fei4aj2f4t2rqu6l
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/libxml2-2.9.10-d4c7cskvhn7qwzzb2wiq7rl67vbl44je
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/hwloc-1.11.11-rjdqchtk6i27lqxxwi4cvfyvrxxgwq7k
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/openmpi-3.1.6-ks5elgg25bbnzwa7fmv7lewbkrcp2qsx
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/hdf5-1.10.7-3cyidn4yvikyyuxehak7ftey2l57ku37
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/netcdf-c-4.7.4-vry3tfp6kpq364gyxrj6fali4kqhirx7
==&gt; Installing netcdf-cxx4-4.3.1-tiyqyxb3eqpptrlcll6rlf27aisekluy
==&gt; No binary for netcdf-cxx4-4.3.1-tiyqyxb3eqpptrlcll6rlf27aisekluy found: installing from source
==&gt; Using cached archive: /var/spack/cache/_source-cache/archive/6a/6a1189a181eed043b5859e15d5c080c30d0e107406fbb212c8fb9814e90f3445.tar.gz
==&gt; netcdf-cxx4: Executing phase: 'autoreconf'
==&gt; netcdf-cxx4: Executing phase: 'configure'
==&gt; netcdf-cxx4: Executing phase: 'build'
==&gt; netcdf-cxx4: Executing phase: 'install'
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/netcdf-cxx4-4.3.1-tiyqyxb3eqpptrlcll6rlf27aisekluy</screen>
  </step>
  <step>
   <para>
    Check which packages are now available with &spack;:
   </para>
<screen>&prompt.root;spack find
==&gt; 14 installed packages
-- linux-sle_hpc15-skylake / gcc@7.5.0 --------------------------
doxygen@1.8.20  hwloc@1.11.11  libpciaccess@0.16  netcdf-c@4.7.4     netcdf-cxx4@4.3.1  openmpi@3.1.6       xz@5.2.3
hdf5@1.10.7     libiconv@1.16  libxml2@2.9.10     netcdf-cxx4@4.3.1  numactl@2.0.14     util-macros@1.19.1  zlib@1.2.11</screen>
   <para>
    In this example, there are now two versions of <literal>netcdf-cxx4</literal>.
    All of the build requirements for <literal>netcdf-cxx4</literal> are also present.
    If you want to show dependency hashes as well as versions, use the
    <literal>-l</literal> option:
   </para>
<screen>&prompt.root;spack find -l
==&gt; 14 installed packages
-- linux-sle_hpc15-skylake / gcc@7.5.0 --------------------------
3griwie doxygen@1.8.20  y3w7dlk libpciaccess@0.16  tiyqyxb netcdf-cxx4@4.3.1   x3glm5y xz@5.2.3
3cyidn4 hdf5@1.10.7     d4c7csk libxml2@2.9.10     tcuvjjt numactl@2.0.14      z6y74kg zlib@1.2.11
rjdqcht hwloc@1.11.11   vry3tfp netcdf-c@4.7.4     ks5elgg openmpi@3.1.6
itovpc5 libiconv@1.16   msiysdr netcdf-cxx4@4.3.1  rpnlbst util-macros@1.19.1</screen>
  </step>
  <step>
   <para>
    Show the differences between the two versions of <literal>netcdf-cxx4</literal>:
   </para>
   <substeps>
    <step>
     <para>
      Find the paths to the <literal>netcdf-cxx4</literal> packages:
     </para>
<screen>&prompt.root;spack find --paths
==&gt; 15 installed packages
-- linux-sle_hpc15-skylake / gcc@7.5.0 --------------------------
doxygen@1.8.20      /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/doxygen-1.8.20-3griwieblqgb6ykc5avzkzrxmtaw4s2g
hdf5@1.10.7         /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/hdf5-1.10.7-3cyidn4yvikyyuxehak7ftey2l57ku37
hwloc@1.11.11       /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/hwloc-1.11.11-rjdqchtk6i27lqxxwi4cvfyvrxxgwq7k
hwloc@2.2.0         /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/hwloc-2.2.0-4lxxw65tzjeqhyxelowclnwqfb3m3rmk
libiconv@1.16       /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/libiconv-1.16-itovpc5jssshcgpeejrro6l7jn4ynaq7
libpciaccess@0.16   /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/libpciaccess-0.16-y3w7dlktz22lmdj6fei4aj2f4t2rqu6l
libxml2@2.9.10      /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/libxml2-2.9.10-d4c7cskvhn7qwzzb2wiq7rl67vbl44je
netcdf-c@4.7.4      /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/netcdf-c-4.7.4-vry3tfp6kpq364gyxrj6fali4kqhirx7
netcdf-cxx4@4.3.1   /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/netcdf-cxx4-4.3.1-msiysdrdua3vv6izluhaeos4nyo5gslq
netcdf-cxx4@4.3.1   /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/netcdf-cxx4-4.3.1-tiyqyxb3eqpptrlcll6rlf27aisekluy
numactl@2.0.14      /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/numactl-2.0.14-tcuvjjtkhnyf5ijrazenjra5h5dbj4in
openmpi@3.1.6       /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/openmpi-3.1.6-ks5elgg25bbnzwa7fmv7lewbkrcp2qsx
util-macros@1.19.1  /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/util-macros-1.19.1-rpnlbst6v3oqjm7tfoxasmn7wlilpqut
xz@5.2.3            /usr
zlib@1.2.11         /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/zlib-1.2.11-z6y74kgd73yc23kr5252slbydmk4posh</screen>
    </step>
    <step>
     <para>
      Move into the parent directory:
     </para>
<screen>&prompt.root;cd /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0</screen>
    </step>
    <step>
     <para>
      Run a <command>diff</command> between each version's <filename>spec.yaml</filename>
      file. This file describes how the package was built.
     </para>
<screen>&prompt.root;diff -ru netcdf-cxx4-4.3.1-msiysdrdua3vv6izluhaeos4nyo5gslq/.spack/spec.yaml netcdf-cxx4-4.3.1-tiyqyxb3eqpptrlcll6rlf27aisekluy/.spack/spec.yaml
--- netcdf-cxx4-4.3.1-msiysdrdua3vv6izluhaeos4nyo5gslq/.spack/spec.yaml 2021-10-04 11:42:23.444000000 +0200
+++ netcdf-cxx4-4.3.1-tiyqyxb3eqpptrlcll6rlf27aisekluy/.spack/spec.yaml 2021-10-04 11:51:49.880000000 +0200
@@ -38,10 +38,10 @@
       version: 7.5.0
     namespace: builtin
     parameters:
-      doxygen: false
+      doxygen: true
       pic: true
       shared: true
-      static: false
+      static: true
       cflags: []
       cppflags: []
       cxxflags: []
@@ -54,8 +54,8 @@
         type:
         - build
         - link
-    hash: msiysdrdua3vv6izluhaeos4nyo5gslq
-    full_hash: oeylqzvergh3ckviaqyhy3idn7vyk3hi
+    hash: tiyqyxb3eqpptrlcll6rlf27aisekluy
+    full_hash: i6btamzuyoo343n63f3rqopkz7ymkapq
 - netcdf-c:
     version: 4.7.4
arch: </screen>
     <para>
      This example shows that one version of <literal>netcdf-cxx4</literal> was
      built with <literal>doxygen</literal> and <literal>static</literal> enabled,
      and the other version of <literal>netcdf-cxx4</literal> was built with
      <literal>doxygen</literal> and <literal>static</literal> disabled.
     </para>
    </step>
   </substeps>
  </step>
 </procedure>
 </sect1>

 <sect1 xml:id="spack-complex-example">
  <title>Using &spack;: complex example with mpich</title>
  <para>
   This example procedure shows you different ways to build <literal>mpich</literal>
   with &spack;.
  </para>
  <procedure xml:id="pro-spack-complex-example">
   <title>Building <literal>mpich</literal> with &spack;</title>
   <step>
    <para>
     List the available versions of <literal>mpich</literal>:
    </para>
<screen>&prompt.root;spack versions mpich
==&gt; Safe versions (already checksummed):
  develop  3.3.2  3.3.1  3.3  3.2.1  3.2  3.1.4  3.1.3  3.1.2  3.1.1  3.1  3.0.4
==&gt; Remote versions (not yet checksummed):
==&gt; Warning: Found no unchecksummed versions for mpich</screen>
   </step>
   <step>
    <para>
     Show detailed information on <literal>mpich</literal>:
    </para>
<screen>&prompt.root;spack info mpich
AutotoolsPackage:   mpich

Description:
    MPICH is a high performance and widely portable implementation of the
    Message Passing Interface (MPI) standard.

Homepage: http://www.mpich.org

Maintainers: @raffenet @yfguo

Tags:
    None

Preferred version:
    3.3.2      http://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz

Safe versions:
    develop    [git] https://github.com/pmodels/mpich.git
    3.3.2      http://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz
    3.3.1      http://www.mpich.org/static/downloads/3.3.1/mpich-3.3.1.tar.gz
    3.3        http://www.mpich.org/static/downloads/3.3/mpich-3.3.tar.gz
    3.2.1      http://www.mpich.org/static/downloads/3.2.1/mpich-3.2.1.tar.gz
    3.2        http://www.mpich.org/static/downloads/3.2/mpich-3.2.tar.gz
    3.1.4      http://www.mpich.org/static/downloads/3.1.4/mpich-3.1.4.tar.gz
    3.1.3      http://www.mpich.org/static/downloads/3.1.3/mpich-3.1.3.tar.gz
    3.1.2      http://www.mpich.org/static/downloads/3.1.2/mpich-3.1.2.tar.gz
    3.1.1      http://www.mpich.org/static/downloads/3.1.1/mpich-3.1.1.tar.gz
    3.1        http://www.mpich.org/static/downloads/3.1/mpich-3.1.tar.gz
    3.0.4      http://www.mpich.org/static/downloads/3.0.4/mpich-3.0.4.tar.gz

Variants:
    Name [Default]       Allowed values          Description
    =================    ====================    ========================================================================

    argobots [off]       on, off                 Enable Argobots support
    device [ch3]         ch3, ch4                Abstract Device Interface (ADI) implementation. The ch4 device is
                                                 currently in experimental state
    fortran [on]         on, off                 Enable Fortran support
    hwloc [on]           on, off                 Use external hwloc package
    hydra [on]<co xml:id="spack-boolean-variant"/>        on, off                 Build the hydra process manager
    libxml2 [on]         on, off                 Use libxml2 for XML support instead of the custom minimalistic
                                                 implementation
    netmod [tcp]<co xml:id="spack-nonboolean-variant"/>     tcp, mxm, ofi, ucx      Network module. Only single netmod builds are supported. For ch3 device
                                                 configurations, this presumes the ch3:nemesis communication channel.
                                                 ch3:sock is not supported by this spack package at this time.
    pci [on]             on, off                 Support analyzing devices on PCI bus
    pmi [pmi]            off, pmi, pmi2, pmix    PMI interface.
    romio [on]           on, off                 Enable ROMIO MPI I/O implementation
    slurm [off]          on, off                 Enable SLURM support
    verbs [off]          on, off                 Build support for OpenFabrics verbs.
    wrapperrpath [on]    on, off                 Enable wrapper rpath

Installation Phases:
    autoreconf    configure    build    install

Build Dependencies:
    argobots  automake   hwloc      libpciaccess  libxml2  pkgconfig  python  ucx
    autoconf  findutils  libfabric  libtool       m4       pmix       slurm

Link Dependencies:
    argobots  hwloc  libfabric  libpciaccess  libxml2  pmix  slurm  ucx

Run Dependencies:
    None

Virtual Packages:
    mpich@3: provides mpi@:3.0
    mpich@1: provides mpi@:1.3
    mpich provides mpi</screen>
    <calloutlist>
     <callout arearefs="spack-boolean-variant">
      <para><literal><replaceable>NAME</replaceable> [on]</literal> is a boolean variant.</para>
     </callout>
     <callout arearefs="spack-nonboolean-variant">
      <para><replaceable>NAME=VALUE</replaceable> is a non-boolean variant.</para>
     </callout>
    </calloutlist>
   </step>
   <step>
    <para>
     Build <literal>mpich</literal> with some variants disabled:
    </para>
<screen>&prompt.root;spack install mpich@3.3.2 -romio -libxml2 -hydra -fortran
==&gt; mpich: Executing phase: 'autoreconf'
==&gt; mpich: Executing phase: 'configure'
==&gt; mpich: Executing phase: 'build'
==&gt; mpich: Executing phase: 'install'
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/mpich-3.3.2-3nexqqx2r4m7p2y7lmovuwvvobi2bygw</screen>
   </step>
   <step>
    <para>
     Rebuild <literal>mpich</literal> with the default variants:
    </para>
<screen>&prompt.root;spack install mpich@3.3.2
.....
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/mpich-3.3.2-sahjm2uhsoc3bi2cljtypwuqaflhamnx</screen>
   </step>
   <step>
    <para>
     Rebuild <literal>mpich</literal> with the compiler flag <literal>cppflags</literal>,
     a specific <literal>libxml</literal> version of <literal>2.9.4</literal>,
     an x86_64 <literal>target</literal>, and a non-boolean <literal>netmod</literal>
     option:
    </para>
<screen>&prompt.root;spack install mpich@3.3.2<co xml:id="spack-comples-at"/> -static<co xml:id="spack-complex-variants"/> cppflags="-O3 -fPIC"<co xml:id="spack-complex-compilerflag"/> target=x86_64<co xml:id="spack-complex-target"/> ^libxml2@2.9.4<co xml:id="spack-complex-hat"/> netmod=tcp<co xml:id="spack-complex-name"/></screen>
    <calloutlist>
     <callout arearefs="spack-comples-at">
      <para>
       <literal>@</literal> is an optional version specifier.
      </para>
     </callout>
     <callout arearefs="spack-complex-variants">
      <para>
       <literal>+</literal> or <literal>-</literal> specifies the boolean variant
       (on or off).
      </para>
     </callout>
     <callout arearefs="spack-complex-compilerflag">
      <para>
       <literal>cflags, cxxflags, fflags, cppflags, ldflags</literal>, and
       <literal>ldlibs</literal> are variants for the compiler flag.
      </para>
     </callout>
     <callout arearefs="spack-complex-target">
      <para>
       <literal>target=<replaceable>value</replaceable></literal> and
       <literal>os=<replaceable>value</replaceable></literal> specify the
       architecture and the operating system. You can list all of the available
       targets by running the command <command>spack arch --known-targets</command>.
      </para>
     </callout>
     <callout arearefs="spack-complex-hat">
      <para>
       <literal>^</literal> specifies a dependency.
      </para>
     </callout>
     <callout arearefs="spack-complex-name">
      <para>
       <literal><replaceable>name</replaceable>=<replaceable>value</replaceable></literal>
       specifies a non-boolean variant.
      </para>
     </callout>
    </calloutlist>
   </step>
   <step>
    <para>
     List all of the available packages and their dependency hashes:
    </para>
<screen>&prompt.root;spack find -l
==&gt; 33 installed packages
-- linux-sle_hpc15-skylake / gcc@7.5.0 --------------------------
3griwie doxygen@1.8.20  y3w7dlk libpciaccess@0.16  vry3tfp netcdf-c@4.7.4      x3glm5y xz@5.2.3
3cyidn4 hdf5@1.10.7     to2atk6 libpciaccess@0.16  msiysdr netcdf-cxx4@4.3.1   bzeebyp xz@5.2.3
rjdqcht hwloc@1.11.11   4cyoxau libxml2@2.9.4      tiyqyxb netcdf-cxx4@4.3.1   z6y74kg zlib@1.2.11
4lxxw65 hwloc@2.2.0     d4c7csk libxml2@2.9.10     tcuvjjt numactl@2.0.14      m4zmub6 zlib@1.2.11
yof3lps hwloc@2.2.0     3nexqqx mpich@3.3.2        ks5elgg openmpi@3.1.6
itovpc5 libiconv@1.16   sahjm2u mpich@3.3.2        rpnlbst util-macros@1.19.1
5mvdlgl libiconv@1.16   jxbspwk mpich@3.3.2        boclx6a util-macros@1.19.1

-- linux-sle_hpc15-x86_64 / gcc@7.5.0 ---------------------------
yzxibyd hwloc@2.2.0    7wmqik2 libpciaccess@0.16  6xjiutf mpich@3.3.2         zmfrpzf xz@5.2.3
mm7at5h libiconv@1.16  jrtvvdj libxml2@2.9.4      jjxbukq util-macros@1.19.1  jxqtsne zlib@1.2.11</screen>
   </step>
   <step>
    <para>
     Show the specifications and output dependencies of
     <literal>/6xjiutf</literal> (<literal>mpich</literal>):
    </para>
<screen>&prompt.root;spack find --deps /6xjiutf
==&gt; 1 installed package
-- linux-sle_hpc15-x86_64 / gcc@7.5.0 ---------------------------
mpich@3.3.2
    hwloc@2.2.0
        libpciaccess@0.16
        libxml2@2.9.4
            libiconv@1.16
            xz@5.2.3
            zlib@1.2.11</screen>
   </step>
  </procedure>
 </sect1>

 <sect1 xml:id="spack-compiler">
  <title>Using a specific compiler</title>
  <para>
   In this example procedure, the goal is to build <literal>mpich</literal>
   with <literal>gcc-10.2.0</literal>.
  </para>
  <procedure xml:id="pro-spack-compiler">
   <title>Using a specific compiler with &spack;</title>
   <step>
    <para>
     Install <literal>gcc-10.2.0</literal>:
    </para>
<screen>&prompt.root;spack install gcc@10.2.0
.....
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-7.5.0/gcc-10.2.0-tkcq6d6xnyfgyqsnpzq36dlk2etylgp7</screen>
   </step>
   <step>
    <para>
     Test whether <literal>gcc</literal> is usable by loading it and attempting
     to build <literal>mpich</literal>, using the <literal>%</literal>
     option to specify that you want to use <literal>gcc-10.2.0</literal>:
    </para>
<screen>
&prompt.root;module load gcc-10.2.0-gcc-7.5.0-tkcq6d6 <co xml:id="spack-module-load"/>
&prompt.root;gcc --version
gcc (Spack GCC) 10.2.0
&prompt.root;spack install mpich@3.2.1 %gcc@10.2.0
==&gt; Error: No compilers with spec gcc@10.2.0 found for operating system sle_hpc15 and target skylake.
Run 'spack compiler find' to add compilers or 'spack compilers' to see which compilers are already recognized by spack.</screen>
    <calloutlist>
     <callout arearefs="spack-module-load">
      <para>
       <command>module load gcc-10.2.0</command> also works if you have only
       one version of <literal>gcc-10.2.0</literal> available in &spack;.
      </para>
     </callout>
    </calloutlist>
    <para>
     In this example, the compiler cannot be found yet.
    </para>
   </step>
   <step>
    <para>
     Update the list of available compilers:
    </para>
<screen>&prompt.root;spack compiler find
==&gt; Added 1 new compiler to /home/tux/.spack/linux/compilers.yaml
    gcc@10.2.0
==&gt; Compilers are defined in the following files:
    /home/tux/.spack/linux/compilers.yaml</screen>
   </step>
   <step>
    <para>
     Rerun the command to build <literal>mpich</literal> with <literal>gcc-10.2.0</literal>:
    </para>
<screen>&prompt.root;spack install mpich@3.2.1 %gcc@10.2.0
.....
[+] /usr/opt/spack/linux-sle_hpc15-skylake/gcc-10.2.0/mpich-3.2.1-e56rcwtqofh2xytep5pjgq6wrxwmsy25</screen>
   </step>
  </procedure>
 </sect1>

</chapter>
