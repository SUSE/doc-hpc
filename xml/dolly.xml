<?xml version="1.0"?>
<!DOCTYPE chapter [
  <!ENTITY % entities SYSTEM "generic-entities.ent">
  %entities;
]>

<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?><chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="dolly.xml" xml:id="cha-dolly" xml:lang="en" version="5.1">
 <title>Dolly clone tool</title>
 <info xmlns:d="http://docbook.org/ns/docbook">
  <abstract>
   <para>
    Dolly is used to send data from a management server to many other nodes.
    It can distribute files, container images,
    partitions, or whole storage devices.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 <revhistory xml:id="rh-cha-dolly">
   <revision>
     <date>2024-07-16</date>
     <revdescription>
       <para/>
     </revdescription>
   </revision>
 </revhistory>
</info>

 <sect1 xml:id="dolly-cloning-process">
  <title>Dolly cloning process</title>
  <para>
   One machine is the management server and distributes the data to the nodes.
   The management server stores the image, partition, disk, or data to be cloned.
   This machine runs dolly as a server. All other nodes are dolly clients. They
   receive the data from the ring, store it locally, and send it to the next node
   in the ring. All of this happens at the same time, so transferring data to
   one node or to hundreds of nodes takes the same amount of time.
  </para>
  <para>
   Dolly creates a virtual TCP ring to distribute data.
  </para>
  <figure xml:id="fig-dolly-cloning-process">
   <title>Dolly cloning process</title>
   <mediaobject>
    <imageobject role="html">
     <imagedata fileref="dolly_cloning_process.png" width="90%"/>
    </imageobject>
    <imageobject role="fo">
     <imagedata fileref="dolly_cloning_process.png" width="90%"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>

 <sect1 xml:id="using-dolly">
  <title>Using dolly </title>
  <para>
   Install dolly on the management server and all dolly client nodes:
  </para>
<screen>&prompt.root;zypper in dolly</screen>
  <para>
   The <command>dolly</command> command requires the following information,
   either directly on the command line or from a configuration file:
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Data to send over the network from the dolly server. This could be a
     storage device, a file (<filename>gzip</filename> or other file types),
     or an image (containers or other data).
    </para>
   </listitem>
   <listitem>
    <para>
     A target on the dolly clients. The target must be the same data type as
     the input from the dolly server. For example, dolly cannot send a
     <filename>gzip</filename> file to a storage device.
    </para>
   </listitem>
   <listitem>
    <para>
     A list of the dolly client nodes where you want to send the data.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Any other parameters are optional. For more information, see
   <command>man dolly</command> and <xref linkend="dolly-support"/>.
  </para>
  <procedure xml:id="pro-using-dolly">
   <title>Cloning data from a dolly server to dolly clients</title>
   <step>
    <para>
     On the dolly server, run the following command:
    </para>
<screen>&prompt.root;dolly -s<co xml:id="dolly-server-parameter"/> -v<co xml:id="dolly-server-verbose"/> -o <replaceable>LOGFILE</replaceable><co xml:id="dolly-server-log"/> -I <replaceable>INPUT</replaceable><co xml:id="dolly-server-input"/> -O <replaceable>OUTPUT</replaceable><co xml:id="dolly-server-output"/> -H <replaceable>NODE1,NODE2,..</replaceable><co xml:id="dolly-server-nodes"/></screen>
    <calloutlist>
     <callout arearefs="dolly-server-parameter">
      <para>
       Specifies that this node is the dolly server (the node that sends the data).
      </para>
     </callout>
     <callout arearefs="dolly-server-verbose">
      <para>
       Switches dolly to verbose mode, which is helpful for debugging.
      </para>
     </callout>
     <callout arearefs="dolly-server-log">
      <para>
       The file that statistical information is written to.
      </para>
     </callout>
     <callout arearefs="dolly-server-input">
      <para>
       The data to clone.
      </para>
     </callout>
     <callout arearefs="dolly-server-output">
      <para>
       The target that will store the data on each dolly client.
      </para>
     </callout>
     <callout arearefs="dolly-server-nodes">
      <para>
       A comma-separated list of dolly clients to receive the data.
      </para>
     </callout>
    </calloutlist>
    <para>
     For example, the following command sends <literal>/dev/sdc1</literal> to
     the nodes <literal>sle152</literal>, <literal>sle153</literal>,
     <literal>sle154</literal>, and <literal>sle155</literal>:
    </para>
<screen>&prompt.root;dolly -s -v -o /tmp/dolly.log -I /dev/sdc1 -O /dev/sdc1 -H sle152,sle153,sle154,sle155</screen>
   </step>
   <step>
    <para>
     On each dolly client, start <command>dolly</command>:
    </para>
<screen>&prompt.root;dolly -v</screen>
    <para>
     You can run this command on multiple nodes at once using <command>pdsh</command>.
     See <xref linkend="sec-remote-pdsh"/>.
    </para>
   </step>
  </procedure>
  <example xml:id="ex-dolly-server-verbose-output">
   <title>Dolly server verbose output</title>
   <para>
    This example shows typical verbose output from the <command>dolly</command>
    command on the dolly server:
   </para>
<screen>'writing '192.168.255.2'
'writing '192.168.255.3'
'writing '192.168.255.4'
'writing '192.168.255.5'
'Parameter file:
infile = '/dev/sdc1'
outfile = '/dev/sdc1'
using data port 9998
using ctrl port 9997
myhostname = 'sle151'
fanout = 1
nr_childs = 1
server = 'sle151'
I'm the server.
I'm not the last host.
There are 4 hosts in the ring (excluding server):
        '192.168.255.2'
        '192.168.255.3'
        '192.168.255.4'
        '192.168.255.5'
Next hosts in ring:
        192.168.255.2 (0)
All parameters read successfully.
No compression used.
Using transfer size 4096 bytes.

Trying to build ring...
Connecting to host 192.168.255.2... Send buffer 0 is 131072 bytes
data control.
Waiting for ring to build...
Host got parameters '192.168.255.2'.
Machines left to wait for: 4
Host ready '192.168.255.2'.
Machines left to wait for: 3
Host got parameters '192.168.255.3'.
Machines left to wait for: 3
Host ready '192.168.255.3'.
Machines left to wait for: 2
Host got parameters '192.168.255.4'.
Machines left to wait for: 2
Host ready '192.168.255.4'.
Machines left to wait for: 1
Host got parameters '192.168.255.5'.
Machines left to wait for: 1
Host ready '192.168.255.5'.
Machines left to wait for: 0
Accepted.
Server: Sending data...
Sent MB: 15854, MB/s: 29.655, Current MB/s: 111.111
Read 15854469120 bytes from file(s).
Writing maxbytes = 15854469120 to ctrlout
Sent MB: 15854.
Synced.
Waiting for child 0.
Clients done.
Time: 534.627532
MBytes/s: 29.655
Aggregate MBytes/s: 118.621
Transmitted.</screen>
  </example>
  <example xml:id="dolly-client-verbose-output">
   <title>Dolly client verbose output</title>
   <para>
    This example shows typical verbose output from the <command>dolly</command>
    command on the dolly clients:
   </para>
<screen>Trying to build ring...
Buffer size: 98304
Receive buffer is 196608 bytes
Accepting...control...
Trying to read parameters...done.
Parsing parameters...
done.
192.168.255.2 is number 0
Parameter file:
infile = '/dev/sdc1'
outfile = '/dev/sdc1'
using data port 9998
using ctrl port 9997
myhostname = '192.168.255.2'
fanout = 1
nr_childs = 1
server = 'sle151'
I'm not the server.
I'm not the last host.
There are 4 hosts in the ring (excluding server):
        '192.168.255.2'
        '192.168.255.3'
        '192.168.255.4'
        '192.168.255.5'
Next hosts in ring:
192.168.255.3 (1)
All parameters read successfully.
No compression used.
Using transfer size 4096 bytes.
Connected data...done.
Connecting to host 192.168.255.3...
data control.
Accepted.
Receiving...
Transfered MB: 15854, MB/s: 29.655, Current MB/s: 116.661
Max. bytes will be 15854469120 bytes. 49152 bytes left.
Transfered MB: 15854, MB/s: 29.655

Synced.
Transmitted.</screen>
  </example>
 </sect1>

 <sect1 xml:id="dolly-configuration-file">
  <title>Dolly configuration file</title>
  <para>
   You can use a dolly configuration file with the <option>-f</option> parameter instead of providing the information manually on the command line.
   The following example shows a typical configuration file called <filename>/etc/dolly.cfg</filename>:
  </para>
<screen>infile /tmp/sle15.sif<co xml:id="dolly-config-in"/>
outfile /data/sle15.sif<co xml:id="dolly-config-out"/>
server sle151<co xml:id="dolly-config-server"/>
firstclient sle152<co xml:id="dolly-config-first"/>
lastclient sle154<co xml:id="dolly-config-last"/>
clients 3<co xml:id="dolly-config-nbclients"/>
sle152<co xml:id="dolly-config-nodes"/>
sle153
sle154
endconfig<co xml:id="dolly-config-end"/></screen>
  <calloutlist>
   <callout arearefs="dolly-config-in">
    <para>
     The data to send over the network from the dolly server.
    </para>
   </callout>
   <callout arearefs="dolly-config-out">
    <para>
     The file or device that will store the data on the dolly clients.
    </para>
   </callout>
   <callout arearefs="dolly-config-server">
    <para>
     The name of the dolly server.
    </para>
   </callout>
   <callout arearefs="dolly-config-first">
    <para>
     The first dolly client in the ring.
    </para>
   </callout>
   <callout arearefs="dolly-config-last">
    <para>
     The last dolly client in the ring.
    </para>
   </callout>
   <callout arearefs="dolly-config-nbclients">
    <para>
     Specifies how many dolly clients are in the ring.
    </para>
   </callout>
   <callout arearefs="dolly-config-nodes">
    <para>
     The list of dolly clients, one per line.
    </para>
   </callout>
   <callout arearefs="dolly-config-end">
    <para>
     Specifies the end of the configuration file.
    </para>
   </callout>
  </calloutlist>
  <para>
   To use this configuration file, run the following command on the dolly server:
  </para>
  <screen>&prompt.root;dolly -v -s -f /etc/dolly.cfg</screen>
 </sect1>

 <sect1 xml:id="dolly-support">
  <title>Dolly limitations</title>
  <para>
   Be aware of the following restrictions:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The output data type must be the same as the input data type. Mixing the
     type of input and output can lead to data corruption.
    </para>
   </listitem>
   <listitem>
    <para>
     Only clone partitions that are identical in size on the dolly server and
     the client node.
    </para>
   </listitem>
   <listitem>
    <para>
     Only clone strictly identical storage devices, or corruption can occur.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The following command line parameters are not supported and are provided as a
   technology preview only:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <option>-S</option>: Ignoring the FQDN is not supported.
    </para>
   </listitem>
   <listitem>
    <para>
     <option>-6</option>: Using IPv6 is not supported.
    </para>
   </listitem>
   <listitem>
    <para>
     <option>-n</option>: Not doing a sync before exiting is not supported as
     this can lead to data corruption.
    </para>
   </listitem>
   <listitem>
    <para>
     <option>-d</option>: Dummy mode should only be used for benchmarking and
     is not supported.
    </para>
   </listitem>
   <listitem>
    <para>
     <option>-c</option>: Specifying the uncompressed size of a compressed file
     should only be used for performance statistics.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The following configuration file options are not supported and are provided as
   a technology preview only:
  </para>
  <itemizedlist>
    <listitem>
    <para>
     <option>compressed</option>: Using the compression option is not supported.
    </para>
   </listitem>
   <listitem>
    <para>
     <option>split</option>: Splitting files is not supported (infile or outfile).
    </para>
   </listitem>
   <listitem>
    <para>
     <option>fanout</option>: This option must be set to 1 (a linear list).
     A binary tree or more is not supported.
    </para>
   </listitem>
   <listitem>
    <para>
     <option>segsize</option>: This benchmark switch is not supported.
    </para>
   </listitem>
   <listitem>
    <para>
     <option>add</option>: Using more than one interface to clone data is not supported.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>

</chapter>
