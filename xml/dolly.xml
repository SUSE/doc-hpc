<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="dolly.xml"
 xml:id="cha-dolly" xml:lang="en" version="5.1">
 <title>Dolly clone tool</title>
 <info>
  <abstract>
   <para>
    Dolly is used to send data from a management server to many other nodes.
    It can distribute files, container images,
    partitions, or whole storage devices.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <sect1 xml:id="dolly-cloning-process">
  <title>Dolly cloning process</title>
  <para>
   One machine is the management server and distributes the data to the nodes.
   The management server stores the image, partition, disk, or data to be cloned.
   This machine runs dolly as a server. All other nodes are dolly clients. They
   receive the data from the ring, store it locally, and send it to the next node
   in the ring. All of this happens at the same time, so transferring data to
   one node or to hundreds of nodes takes the same amount of time.
  </para>
  <para>
   Dolly creates a virtual TCP ring to distribute data.
  </para>
  <figure xml:id="fig-dolly-cloning-process">
   <title>Dolly cloning process</title>
   <mediaobject>
    <imageobject role="html">
     <imagedata fileref="dolly_cloning_process.png" width="50%"/>
    </imageobject>
    <imageobject role="fo">
     <imagedata fileref="dolly_cloning_process.png" width="50%"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>

 <sect1 xml:id="using-dolly">
  <title>Using dolly </title>
  <para>
   Install dolly on the management server and all dolly client nodes:
  </para>
<screen>&prompt;zypper in dolly</screen>
  <para>
   The <command>dolly</command> command requires the following mandatory parameters:
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <literal>-I</literal>: Data to send over the network from the dolly
     server. This could be a storage device, a file (<filename>gzip</filename>
     or other file types), or an image (containers or other data).
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>-O</literal>: A target on the dolly clients. The target must be
     the same data type as the input from the dolly server. For example, dolly
     cannot send a <filename>gzip</filename> file to a storage device.
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>-H</literal>: A list of the dolly client nodes where you want to
     send the data.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Any other parameters are optional.
  </para>
  <procedure xml:id="pro-using-dolly">
   <title>Cloning data from a dolly server to dolly clients</title>
   <step>
    <para>
     On the dolly server, run the following command:
    </para>
<screen>&prompt;dolly -s<co xml:id="dolly-server-parameter"/> -v<co xml:id="dolly-server-verbose"/> -o <replaceable>LOGFILE</replaceable><co xml:id="dolly-server-log"/> -I <replaceable>INPUT</replaceable><co xml:id="dolly-server-input"/> -O <replaceable>OUTPUT</replaceable><co xml:id="dolly-server-output"/> -H <replaceable>NODE1,NODE2,..</replaceable><co xml:id="dolly-server-nodes"/></screen>
    <calloutlist>
     <callout arearefs="dolly-server-parameter">
      <para>
       Specifies that this node is the dolly server (the node that sends the data).
      </para>
     </callout>
     <callout arearefs="dolly-server-verbose">
      <para>
       Switches dolly to verbose mode (helpful for debugging).
      </para>
     </callout>
     <callout arearefs="dolly-server-log">
      <para>
       The file that statistical information is written to.
      </para>
     </callout>
     <callout arearefs="dolly-server-input">
      <para>
       The data to clone.
      </para>
     </callout>
     <callout arearefs="dolly-server-output">
      <para>
       The target that will store the data on each dolly client.
      </para>
     </callout>
     <callout arearefs="dolly-server-nodes">
      <para>
       A comma-separated list of dolly clients to receive the data.
      </para>
     </callout>
    </calloutlist>
    <para>
     For example, the following command sends <literal>/dev/sdc1</literal> to
     the nodes <literal>sle152</literal>, <literal>sle153</literal>,
     <literal>sle154</literal>, and <literal>sle155</literal>:
    </para>
<screen>&prompt;dolly -s -v -o /tmp/dolly.log -I /dev/sdc1 -O /dev/sdc1 -H sle152,sle153,sle154,sle155</screen>
   </step>
   <step>
    <para>
     On each client node, start <command>dolly</command>:
    </para>
<screen>&prompt;dolly -v</screen>
    <para>
     You can run this command on multiple nodes at once using <command>pdsh</command>.
     See <xref linkend="sec-remote-pdsh"/>.
    </para>
   </step>
  </procedure>
  <example xml:id="ex-dolly-server-verbose-output">
   <title>Dolly server verbose output</title>
   <para>
    This example shows typical verbose output from the <command>dolly</command>
    command on the dolly server:
   </para>
<screen>'writing '192.168.255.2'
'writing '192.168.255.3'
'writing '192.168.255.4'
'writing '192.168.255.5'
'Parameter file:
infile = '/dev/sdc1'
outfile = '/dev/sdc1'
using data port 9998
using ctrl port 9997
myhostname = 'sle151'
fanout = 1
nr_childs = 1
server = 'sle151'
I'm the server.
I'm not the last host.
There are 4 hosts in the ring (excluding server):
        '192.168.255.2'
        '192.168.255.3'
        '192.168.255.4'
        '192.168.255.5'
Next hosts in ring:
        192.168.255.2 (0)
All parameters read successfully.
No compression used.
Using transfer size 4096 bytes.

Trying to build ring...
Connecting to host 192.168.255.2... Send buffer 0 is 131072 bytes
data control.
Waiting for ring to build...
Host got parameters '192.168.255.2'.
Machines left to wait for: 4
Host ready '192.168.255.2'.
Machines left to wait for: 3
Host got parameters '192.168.255.3'.
Machines left to wait for: 3
Host ready '192.168.255.3'.
Machines left to wait for: 2
Host got parameters '192.168.255.4'.
Machines left to wait for: 2
Host ready '192.168.255.4'.
Machines left to wait for: 1
Host got parameters '192.168.255.5'.
Machines left to wait for: 1
Host ready '192.168.255.5'.
Machines left to wait for: 0
Accepted.
Server: Sending data...
Sent MB: 15854, MB/s: 29.655, Current MB/s: 111.111
Read 15854469120 bytes from file(s).
Writing maxbytes = 15854469120 to ctrlout
Sent MB: 15854.
Synced.
Waiting for child 0.
Clients done.
Time: 534.627532
MBytes/s: 29.655
Aggregate MBytes/s: 118.621
Transmitted.</screen>
  </example>
  <example xml:id="dolly-client-verbose-output">
   <title>Dolly client verbose output</title>
   <para>
    This example shows typical verbose output from the <command>dolly</command>
    command on the dolly clients:
   </para>
<screen>Trying to build ring...
Buffer size: 98304
Receive buffer is 196608 bytes
Accepting...control...
Trying to read parameters...done.
Parsing parameters...
done.
192.168.255.2 is number 0
Parameter file:
infile = '/dev/sdc1'
outfile = '/dev/sdc1'
using data port 9998
using ctrl port 9997
myhostname = '192.168.255.2'
fanout = 1
nr_childs = 1
server = 'sle151'
I'm not the server.
I'm not the last host.
There are 4 hosts in the ring (excluding server):
        '192.168.255.2'
        '192.168.255.3'
        '192.168.255.4'
        '192.168.255.5'
Next hosts in ring:
192.168.255.3 (1)
All parameters read successfully.
No compression used.
Using transfer size 4096 bytes.
Connected data...done.
Connecting to host 192.168.255.3...
data control.
Accepted.
Receiving...
Transfered MB: 15854, MB/s: 29.655, Current MB/s: 116.661
Max. bytes will be 15854469120 bytes. 49152 bytes left.
Transfered MB: 15854, MB/s: 29.655

Synced.
Transmitted.</screen>
  </example>




 </sect1>

 <sect1 xml:id="dolly-configuration-file">
  <title>Dolly configuration file</title>
  <para>
   <command>dolly</command> can also use a configuration file for the cloning process.
   The format is strict but simple. The following example shows a typical configuration file:
  </para>
  <screen>
infile /tmp/sle15sp3.sif<co xml:id="dolly-config-in"/>
outfile /data/sle15sp3.sif<co xml:id="dolly-config-out"/>
server sle151<co xml:id="dolly-config-server"/>
firstclient sle152<co xml:id="dolly-config-first"/>
lastclient sle154<co xml:id="dolly-config-last"/>
clients 3<co xml:id="dolly-config-nbclients"/>
sle152<co xml:id="dolly-config-nodes"/>
sle153
sle154
endconfig<co xml:id="dolly-config-end"/></screen>
  <calloutlist>
   <callout arearefs="dolly-config-in">
    <para>
     <literal>infile <replaceable>DATA</replaceable></literal>: the data to send over the network
    </para>
   </callout>
   <callout arearefs="dolly-config-out">
    <para>
     <literal>outfile <replaceable>DATA</replaceable></literal>: the file or device to store data on the client node
    </para>
   </callout>
   <callout arearefs="dolly-config-server">
    <para>
     <literal>server <replaceable>DOLLY_SERVER</replaceable></literal>: the name of the dolly server
    </para>
   </callout>
   <callout arearefs="dolly-config-first">
    <para>
     <literal>firstclient <replaceable>NODE</replaceable></literal>: the first client in the ring
    </para>
   </callout>
   <callout arearefs="dolly-config-last">
    <para>
     <literal>lastclient <replaceable>NODE</replaceable></literal>: the last client in the ring
    </para>
   </callout>
   <callout arearefs="dolly-config-nbclients">
    <para>
     <literal>clients <replaceable>NUMBER</replaceable></literal>: how many dolly clients are in the ring
    </para>
   </callout>
   <callout arearefs="dolly-config-nodes">
    <para>
     <literal><replaceable>NODENAME</replaceable></literal>: the list of dolly clients, one per line
    </para>
   </callout>
   <callout arearefs="dolly-config-end">
    <para>
     <literal>endconfig</literal>: mandatory parameter to specify the end of the configuration file
    </para>
   </callout>
  </calloutlist>
  <para>To use this configuration file, you must use the <option>-f <replaceable>CONFIGURATION_FILE</replaceable></option> option on the <command>dolly</command> command line:</para>
  <screen>&prompt; dolly -v -s<co xml:id="dolly-config-command"/> -f /etc/dolly.cfg</screen>
  <calloutlist>
   <callout arearefs="dolly-config-command">
    <para><option>-s</option> is mandatory if you are using <option>-f</option></para>
   </callout>
  </calloutlist>
 </sect1>

 <sect1 xml:id="dolly-support">
 <title>Dolly limitations</title>
 <para>
  <command>dolly</command> provides some specific parameters which are not supported because
  they are unsafe, untested, or dedicated for benchmarking or doing statistics. They are provided
  as a technology preview only.
 </para>
 <itemizedlist>
  <listitem>
   <para>to clone a partition, they must be identical in size on the dolly server and the client node</para>
  </listitem>
  <listitem>
   <para>
    when cloning a device, disk, partition, or file, you must properly set the input and output options based on the data you want to clone. Mixing the type of input and output can lead to data corruption.
   </para>
  </listitem>
  <listitem>
   <para>
    storage device: it is mandatory to clone strictly identical storage devices, or corruption can occur
   </para>
  </listitem>
  <listitem>
   <para>
    <option>-S</option> ignoring the FQDN is not supported
   </para>
  </listitem>
  <listitem>
   <para>
    <option>-6</option> using IPv6 is not supported
   </para>
  </listitem>
  <listitem>
   <para>
    <option>-n</option> (do not do a sync before exiting) is not supported as this can lead to data corruption
   </para>
  </listitem>
  <listitem>
   <para>
    <option>-d</option> dummy mode should only be used for benchmarking and is not supported
   </para>
  </listitem>
  <listitem>
   <para>
    <option>-c</option> should only be used for performance statistics
   </para>
  </listitem>
 </itemizedlist>
 <para>Specific configuration file options:</para>
 <itemizedlist>
   <listitem>
   <para>
    using the compression option is not supported (<option>compressed</option>)
   </para>
  </listitem>
  <listitem>
   <para>
    <option>split</option> is not supported (infile or outfile)
   </para>
  </listitem>
  <listitem>
   <para>
    <option>fanout</option> must be set to 1 (a linear list). Any other binary tree or more is not supported.
   </para>
  </listitem>
  <listitem>
   <para>the benchmark switch <option>segsize</option> is not supported</para>
  </listitem>
  <listitem>
   <para>
    using more than one interface to clone data is not supported (<option>add</option> parameter)
   </para>
  </listitem>
 </itemizedlist>
 </sect1>

</chapter>
